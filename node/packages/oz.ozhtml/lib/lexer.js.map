{"version":3,"sources":["../src/lexer.js"],"names":["Lexer","input","CHAR","tokens","me","length","pop","char","read","charConst","GREATER","BACKSLASH","tokenConst","TAGHEADCLOSE","BANG","ii","value","String","fromCharCode","EOF","MINUS","MINOR","substring","TAGCOMMENT","TAGHEADOPEN","console","log","TAGBODY","PARENTHESISOPEN","PARENTHESISCLOSE","EQUAL","MULTIPLICATION","BRACKETOPEN","BRACKETClOSE","BRACKETCLOSE","DOT","DOUBLEDOT","DOUBLEQUOTES","STRING","isWhiteSpace","WHITESPACE","isWord","isNumeric","WORD","NUMERIC"],"mappings":"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","file":"lexer.js","sourcesContent":["import * as tokenConst from \"./token_const\";\r\nimport * as charConst from \"./char_const\";\r\nimport {Token} from  \"./token\";\r\nexport class Lexer {\r\n    constructor(input){\r\n        this.CHAR=-1;\r\n        this.input = input;\r\n        this.tokens=[];\r\n    }\r\n    static isWord(char){\r\n        return ( 96 < char && 123 > char) || ( 64 < char && 91 > char || char === charConst.MINUS || char === 95 || char === 35);\r\n    };\r\n    static isNumeric(char){\r\n        return ( 47 < char && 58 > char);\r\n    };\r\n    static isWhiteSpace(char){\r\n        return char === 32 || char === 13 || char === 10;\r\n    };\r\n    tokenize () {\r\n        let me = this;\r\n        if (me.tokens.length)\r\n            return me.tokens.pop();\r\n        let char;\r\n        if (me.CHAR!==-1) {\r\n            char = me.CHAR;\r\n            me.CHAR=-1;\r\n        }else {\r\n            char = me.input.read();\r\n        }\r\n        if (char===charConst.GREATER){\r\n            char = me.input.read();\r\n            if (char===charConst.BACKSLASH){\r\n                return new Token(tokenConst.TAGHEADCLOSE)\r\n            }else if (char===charConst.BANG){\r\n            \tme.input.read();\r\n                me.input.read();\r\n                let ii=0;\r\n                let value=\"\";\r\n                while(true){\r\n                    char= me.input.read();\r\n                    value+= String.fromCharCode(char);\r\n                    if (char===charConst.EOF){\r\n                        break;\r\n                    }else if (ii===0&&char===charConst.MINUS){\r\n                        ii=1;\r\n                    }else if (ii===1&&char===charConst.MINUS){\r\n                        ii=2;\r\n                    }else if (ii===2&&char===charConst.MINOR){\r\n                        break;\r\n                    }else {\r\n                        ii=0;\r\n                    }\r\n                }\r\n                value =value.substring(0,value.length-3);\r\n                return new Token(tokenConst.TAGCOMMENT,value);\r\n            }else {\r\n                me.CHAR = char;\r\n                return new Token(tokenConst.TAGHEADOPEN);\r\n            }\r\n        }else  if (char===charConst.BACKSLASH){\r\n            char = input.read();\r\n            if (char===charConst.MINOR){\r\n                console.log(char);\r\n            }\r\n            return new Token(tokenConst.TAGHEADCLOSE);\r\n        }else if (char===charConst.MINOR){\r\n            let value=\"\";\r\n            char = input.read();\r\n            while (char !== charConst.GREATER && char !== charConst.EOF){\r\n                value+= String.fromCharCode(char);\r\n                char = input.read();\r\n            }\r\n            me.CHAR = char;\r\n            return new Token(tokenConst.TAGBODY,value);\r\n        }else if (char===charConst.PARENTHESISOPEN){\r\n            return new Token(tokenConst.PARENTHESISOPEN);\r\n        }else if (char===charConst.PARENTHESISCLOSE){\r\n            return new Token(tokenConst.PARENTHESISCLOSE);\r\n        }else if (char===charConst.EQUAL) {\r\n            return new Token(tokenConst.EQUAL);\r\n        }else if (char===charConst.MULTIPLICATION) {\r\n\r\n\r\n            return new Token(tokenConst.MULTIPLICATION);\r\n\r\n        }else if (char===charConst.BRACKETOPEN) {\r\n            return new Token(tokenConst.BRACKETOPEN);\r\n        }else if (char===charConst.BRACKETClOSE) {\r\n            return new Token(tokenConst.BRACKETCLOSE);\r\n        }else if (char===charConst.DOT) {\r\n            return new Token(tokenConst.DOT);\r\n        }else if (char===charConst.DOUBLEDOT) {\r\n            return new Token(tokenConst.DOUBLEDOT);\r\n        }else if (char===charConst.DOUBLEQUOTES) {\r\n            let value=\"\";\r\n            char = input.read();\r\n            while (char !== charConst.DOUBLEQUOTES && char !== charConst.EOF){\r\n                value+= String.fromCharCode(char);\r\n                char = input.read();\r\n            }\r\n            return new Token(tokenConst.STRING,value);\r\n        }else if (Lexer.isWhiteSpace(char)) {\r\n            while (Lexer.isWhiteSpace(char)){\r\n                char = input.read();\r\n            }\r\n            me.CHAR = char;\r\n            return new Token(tokenConst.WHITESPACE);\r\n        }else if (Lexer.isWord(char)) {\r\n            let value=\"\";\r\n            while (Lexer.isWord(char)||Lexer.isNumeric(char)){\r\n                value+= String.fromCharCode(char);\r\n                char = input.read();\r\n            }\r\n            me.CHAR = char;\r\n            return new Token(tokenConst.WORD,value);\r\n        }else if (Lexer.isNumeric(char)) {\r\n            let value=\"\";\r\n            while (Lexer.isNumeric(char)){\r\n                value+= String.fromCharCode(char);\r\n                char = input.read();\r\n            }\r\n            me.CHAR = char;\r\n            return new Token(tokenConst.NUMERIC,value);\r\n        }else if (char===charConst.EOF) {\r\n            return new Token(tokenConst.EOF);\r\n        }else {\r\n            throw \"do'nt know charcode \"+char;\r\n        }\r\n    }\r\n}\r\n"]}