{"version":3,"sources":["../src/parser.js"],"names":["astConst","require","tokenConst","Ast","Parser","lexer","me","tk","tokenize","isNot","WHITESPACE","tokens","push","is","TAGCOMMENT","value","VALUE","expected","NUMERIC","STRING","tokenToAstValue","fields","isTemplate","isGlobal","closeAttr","MULTIPLICATION","operation","PARENTHESISOPEN","PARENTHESISCLOSE","BRACKETOPEN","BRACKETCLOSE","WORD","DOUBLEDOT","DOT","length","index","pop","pushToken","ATTRKEY","TAGHEADOPEN","tkName","attrs","body","_attr","key","attrKey","EQUAL","attrValue","ATTR","TAGBODY","TAGHEADCLOSE","tk1","toString","tk2","b","tagBody","TAG","name","unexpected","tokenIndex","items","EOF","console","log","DOCUMENT"],"mappings":"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","file":"parser.js","sourcesContent":["const  astConst = require(\"./ast_const\");\r\nconst  tokenConst = require(\"./token_const\");\r\nconst {Ast} = require(\"./ast\");\r\nclass Parser {\r\n    contructor (lexer){\r\n        let me =this;\r\n        me.lexer = lexer;\r\n    }\r\n    tokenize() {\r\n        let me =this;\r\n        while (true){\r\n            let tk = me.lexer.tokenize();\r\n            // console.log( (tk.id) +  \"  \" +tk.toString()  );\r\n            if (tk.isNot(tokenConst.WHITESPACE))\r\n                return tk;\r\n        }\r\n    };\r\n    pushToken(tk){\r\n        let me =this;\r\n        me.lexer.tokens.push(tk);\r\n    };\r\n    tokenToAstValue(tk) {\r\n        if (tk.is(tokenConst.TAGCOMMENT)){\r\n            return new Ast(astConst.TAGCOMMENT,tk.value)\r\n        }\r\n        return new Ast(astConst.VALUE,tk.value)\r\n    };\r\n    attrValue() {\r\n        let me =this;\r\n        let tk = tokenize();\r\n        tk.expected([tokenConst.NUMERIC,tokenConst.STRING]);\r\n        return me.tokenToAstValue(tk)\r\n    };\r\n    attrKey() {\r\n        let me =this;\r\n        let tk = tokenize();\r\n        let fields = [];\r\n        let isTemplate=false;\r\n        let isGlobal=false;\r\n        let closeAttr=[];\r\n        if (tk.is(tokenConst.MULTIPLICATION)){\r\n            isTemplate=true;\r\n            tk = tokenize();\r\n        }\r\n        let operation=[];\r\n        while (true){\r\n            if (tk.is(tokenConst.PARENTHESISOPEN)){\r\n                closeAttr.push(tokenConst.PARENTHESISCLOSE);\r\n                operation.push(\"OUTPUT\");\r\n                tk = tokenize();\r\n            }else if (tk.is(tokenConst.BRACKETOPEN)){\r\n                operation.push(\"INPUT\");\r\n                closeAttr.push(tokenConst.BRACKETCLOSE);\r\n                tk = tokenize();\r\n            }else {\r\n                break;\r\n            }\r\n        }\r\n        let  value = tk;\r\n        tk.expected(tokenConst.WORD);\r\n        tk = tokenize();\r\n        if (tk.is(tokenConst.DOUBLEDOT)){\r\n            isGlobal=true;\r\n            tk = tokenize();\r\n            tk.expected(tokenConst.WORD);\r\n            fields.push(me.tokenToAstValue(tk));\r\n            tk = tokenize();\r\n\r\n        }\r\n        while (tk.is(tokenConst.DOT)){\r\n            tk = tokenize();\r\n            tk.expected(tokenConst.WORD);\r\n            fields.push(  me.tokenToAstValue(tk));\r\n            tk = tokenize();\r\n        }\r\n        while (closeAttr.length){\r\n            let index =closeAttr.pop();\r\n            tk.expected(index);\r\n            tk = tokenize();\r\n        }\r\n        me.pushToken(tk);\r\n\r\n        return new Ast(astConst.ATTRKEY,{\r\n            value: me.tokenToAstValue(value),\r\n            fields:fields,\r\n            isGlobal:isGlobal,\r\n            isTemplate:isTemplate,\r\n            operation:operation\r\n        });\r\n    };\r\n    tagBody () {\r\n        let me =this;\r\n        let tk = tokenize();\r\n        if (tk.is(tokenConst.TAGHEADOPEN)){\r\n            let tkName = tokenize();\r\n            tkName.expected(tokenConst.WORD);\r\n            let attrs =[];\r\n            let body =[];\r\n            while (true){\r\n                let tk = tokenize();\r\n                while(tk.is([tokenConst.WORD,tokenConst.MULTIPLICATION,tokenConst.PARENTHESISOPEN,tokenConst.BRACKETOPEN])){\r\n                    let _attr ={};\r\n                    me. pushToken(tk);\r\n                    _attr.key =me.attrKey();\r\n                    tk = tokenize();\r\n                    if (tk.is(tokenConst.EQUAL)){\r\n                        _attr.value =me.attrValue();\r\n                        tk = tokenize();\r\n                    }\r\n                    attrs.push(new Ast(astConst.ATTR,_attr));\r\n                }\r\n                if (tk.expected([tokenConst.TAGBODY,tokenConst.TAGHEADOPEN])){\r\n                    me.pushToken(tk);\r\n                    break;\r\n                }\r\n            }\r\n            while (true){\r\n                tk = tokenize();\r\n                if (tk.is(tokenConst.TAGHEADCLOSE)){\r\n                    let tk1 =tk;\r\n                    tk.toString();\r\n                    let tk2 = tk = tokenize();\r\n                    tk.expected(tokenConst.WORD);\r\n                    if (!tk.is(tokenConst.WORD,tkName.value)){\r\n                        me.pushToken(tk2);\r\n                        me.pushToken(tk1);\r\n                    }\r\n                    break;\r\n                }\r\n                me.pushToken(tk);\r\n                let b = me.tagBody();\r\n                body.push(b)\r\n            }\r\n            return new Ast(astConst.TAG,{\r\n                name: me.tokenToAstValue(tkName),\r\n                attrs:attrs,\r\n                body:body\r\n            });\r\n\r\n        }else if (tk.is(tokenConst.TAGBODY)){\r\n            return   me.tokenToAstValue(tk);\r\n        }else if (tk.is(tokenConst.TAGCOMMENT)){\r\n            return   me.tokenToAstValue(tk);\r\n        }else {\r\n            tk.unexpected(tk.tokenIndex)\r\n        }\r\n    };\r\n    parse() {\r\n        let me =this;\r\n        let items = [];\r\n        while (true){\r\n            let tk = me.tokenize();\r\n            if (tk.is(tokenConst.EOF)){\r\n                console.log(\"Token.......................\");\r\n                break;\r\n            }else {\r\n                me.pushToken(tk);\r\n                let  b=   me.tagBody();\r\n                items.push(b)\r\n            }\r\n        }\r\n        return new Ast(astConst.DOCUMENT,items);\r\n    };\r\n}\r\n\r\n"]}