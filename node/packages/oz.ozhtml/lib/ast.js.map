{"version":3,"sources":["../src/ast.js"],"names":["astConst","require","Ast","value","astIndex","name","NAMES","me","Array","isArray","b","tokenIndex","iii","is","apply","arguments","Error","isNot","JSON","stringify","ATTRKEY","fields","field","push","toData","type","isGlobal","operation","DOCUMENT","values","v","TAG","attrs","body","ATTR","r","key","VALUE","TAGCOMMENT"],"mappings":"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","file":"ast.js","sourcesContent":["const astConst = require(\"./ast_const\");\r\n\r\nexport class Ast {\r\n    constructor(value, astIndex) {\r\n        this.astIndex = astIndex;\r\n        this.value = value;\r\n        this.name = astConst.NAMES[astIndex];\r\n    }\r\n    is(astIndex, value) {\r\n        let me = this;\r\n        if (Array.isArray(astIndex)) {\r\n            let b;\r\n            for (let iii of tokenIndex) {\r\n                b = me.is(iii, value);\r\n                if (b) {\r\n                    b = true;\r\n                    break;\r\n                }\r\n            }\r\n            return !!b;\r\n        }\r\n\r\n        return (me.astIndex === astIndex);\r\n    }\r\n    isNot(astIndex, value) {\r\n        let me = this;\r\n        return !me.is.apply(me, arguments);\r\n    }\r\n    expected(astIndex, value) {\r\n        let me = this;\r\n        let b = me.is.apply(me, arguments);\r\n        if (!b) {\r\n            throw new Error(\"unexpected ast \" + me.name);\r\n        }\r\n        return b;\r\n    }\r\n    unexpected(astIndex, value) {\r\n        let me = this;\r\n        let b = me.isNot.apply(me, arguments);\r\n        if (!b) {\r\n            throw new Error(\"unexpected ast \" + me.name);\r\n        }\r\n        return b;\r\n    }\r\n    toString() {\r\n        let me = this;\r\n        if (value) {\r\n            return \"Ast.\" + me.name + \"(\" + JSON.stringify(value) + \");\";\r\n        } else {\r\n            return \"Ast.\" + me.name + \"();\";\r\n        }\r\n    }\r\n    toData() {\r\n        let me = this;\r\n        if (me.astIndex === astConst.ATTRKEY) {\r\n            let fields = [];\r\n            for (let field of me.value.fields) {\r\n                fields.push(field.toData());\r\n            }\r\n            let value = me.value.value.toData();\r\n            return {\r\n                type: me.name,\r\n                fields: fields,\r\n                isGlobal: me.value.isGlobal,\r\n                operation: me.value.operation,\r\n                value: value\r\n            }\r\n        } else if (me.astIndex === astConst.DOCUMENT) {\r\n            let values = [];\r\n            for (let v of me.value) {\r\n                values.push(v.toData());\r\n            }\r\n            return {\r\n                type: me.name,\r\n                values: values\r\n            }\r\n        } else if (me.astIndex === astConst.TAG) {\r\n            let attrs = [];\r\n            for (let v of me.value.attrs) {\r\n                attrs.push(v.toData());\r\n            }\r\n            let body = [];\r\n            for (let v of me.value.attrs) {\r\n                body.push(v.toData());\r\n            }\r\n            return {\r\n                type: me.name,\r\n                name: me.value.name.toData(),\r\n                attrs: attrs,\r\n                body: body\r\n            }\r\n\r\n        } else if (me.astIndex === astConst.ATTR) {\r\n            let r = {\r\n                type: me.name,\r\n                attrs: me.value.key.toData()\r\n            };\r\n            if (me.value.value) {\r\n                r.value = me.value.value.toData();\r\n            }\r\n\r\n            return r;\r\n        } else if (me.astIndex === astConst.VALUE) {\r\n            return {\r\n                type: me.name,\r\n                value: me.value\r\n            };\r\n        } else if (me.astIndex === astConst.TAGCOMMENT) {\r\n            return {\r\n                type: me.name,\r\n                value: me.value\r\n            };\r\n        }\r\n    }\r\n};"]}